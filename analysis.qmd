---
format:
  html:
    toc: true
    toc-depth: 4
    page-layout: full
---

# Analysis

"Our goal is to define the top 20% of all Hubbard Hall donors from the past 11 years (I think that was how far back we said this went) and then also from the past 5 years.

We are looking for contact family name, total giving all time, last gift date, last FY total giving amount, and for the top 20% a breakdown of what their gift categories were (we want a complete donor profile, so for each donor we want to see the total contribution amount that includes donations, class purchases, ticket buys, etc.)

We have a couple of questions for Judy additionally, that may be answered after Don has a go. Namely, we are looking for where Sue's donations from Opus live, and also where Kathy Rhoome's donations live to make sure that donations like these are included in the total.  Also, we want to find out if there is a way to link businesses who give to individuals who exist in the database as a soft credit?  This doesn't apply to all businesses, but for example, is MSK linked to Jason in a way where you can pull total giving for an individual and see his corporate contributions as well?"


## Setup

```{r}
#| label: setup

source(here::here("libraries.R"))

hhdr <- here::here("data-raw")
neon <- fs::path(hhdr, "neon")
judy <- fs::path(hhdr, "judy")
rds <- fs::path(hhdr, "rds")

```

## Get and save data

### Define variable mapping

Map my variable names to neon names so that I have consistent names across files.

```{r}
#| label: variable-mapping

# lookup <- c(pl = "Petal.Length", sl = "Sepal.Length")
# rename(iris, all_of(lookup)) # use any_of() if some are not in the data

# create a lookup vector from a tibble:
# lookup <- deframe(vnames[, c("newname", "oldname")])

# donations: "Household Name","Donation ID","Account ID","Shopping Cart ID","Campaign ID","Donation Amount","Donation Date","Account Type","Full Name (F)","Company Name","City","Address Line 1","State/Province","Zip Code","Campaign Name","Purpose","Fund","Tender Type","Tribute Full Name (F)","DAFpay Advisor Account ID","DAFpay Advisor Account Name","DAFpay Grant ID","DAFpay Note","DAFpay Status","Deceased","Do Not Contact"

# accounts: "Account Type","Account ID","Household ID","Activity Contact Account ID","Activity ID","Company ID","Group Primary Member ID","Import ID","Household Name","Full Name (F)","Company Name","Full Street Address (F)","City","State/Province","Email 1","Contact Type","Do Not Contact","Deceased","Account Note","Partner and Children (C)","All Registration Amount","All Donation Amount","Gender",

# registrations: "Account ID","Account Name","Amount","Event","Notes","Starts On","Payment","Created Date","Created By","Last Modified Date","Last Modified By","Type","System Updates","Campaign","Registered On","Status"

# put major id information first and then have blocks for different kinds of variables

vnames <- read_csv(
  "vname, neon, sources  
  hhid, Household ID, accounts
  hhname, Household Name, donor-accounts
  groupaccountid, Group Primary Member ID, accounts
  partnerchild, Partner and Children (C), accounts
  gender, Gender, accounts

  accountid, Account ID, donor
  account_name, Account Name, regs
  account_type, Account Type, donor 
  companyid, Company ID, accounts
  company_name, Company Name, donor-accounts

  deceased, Deceased, donor-accounts
  donotcontact, Do Not Contact, donor-accounts

  activityid, Activity ID, accounts
  activity_contactid, Activity Contact Account ID, accounts
  importid, Import ID, accounts
  contact_type, Contact Type, accounts
  account_note, Account Note, accounts
  reg_allamount, All Registration Amount, accounts
  donation_allamount, All Donation Amount, accounts

  shopcartid, Shopping Cart ID, donor
  campaignid, Campaign ID, donor
  campaign, Campaign Name, donor
  purpose, Purpose, donor
  fund, Fund, donor
  tender, Tender Type, donor

  fullname, Full Name (F), donor-accounts
  city, City, donor
  address1, Address Line 1, donor
  state, State/Province, donor
  zip, Zip Code, donor
  fulladdress, Full Street Address (F), accounts
  email1, Email 1, accounts

  donation, Donation Amount, donor
  donationid, Donation ID, donor  
  donation_date, Donation Date, donor  
  tribute_fullname, Tribute Full Name (F), donor  
  dafadvisorid, DAFpay Advisor Account ID, donor
  dafadvisorname, DAFpay Advisor Account Name, donor
  dafgrantid, DAFpay Grant ID, donor
  dafstatus, DAFpay Status, donor
  dafnote, DAFpay Note, donor
  "
)
vnames

lookup <- deframe(vnames[, c("vname", "neon")])
lookup

```

### Household linkage -- REDO

Linkages obtained from "Don's all-contacts report", an Additional Contact Report; run on 2025-07-18.

```{r}
#| label: linkages
#| eval: false

linkfname <- "additional_contacts_linkage_2025-07-18.csv"

link1 <- vroom(
  fs::path(neon, linkfname),
  col_types = cols(.default = col_character())
)
skim(link1)
glimpse(link1)

link2 <- link1 |>
  select(
    hhid = 1,
    contactid = 2,
    mainid = 3,
    primaryid = 4,
    pname = 5,
    accttype = 6,
    contacttype = 7,
    indivtype = 8,
    hhname = 9,
    members = 10,
    hhaddr1 = 11,
    hhaddr2 = 12,
    hhaddr3 = 13,
    hhaddr4 = 14,
    hhcity = 15,
    hhcounty = 16,
    hhstate = 17,
    hhzip = 18,
    hhaddress = 19,
    relationship = 20,
    prefname = 21,
    salutation = 22,
    deceased = 23,
    dod = 24,
    cdonations = 25,
    junk = 26
  )

cbind(names(link1), names(link2))
glimpse(link2)
count(link2, accttype) # Individual, Household Contact Record; Company, Company Contact Record
count(link2, contacttype) # Household Contact, Primary Household Contact; Company, c Contact, c Primary Contact
count(link2, indivtype) # potentially useful but most are NA
count(link2, deceased) # 47 yes

link3 <- link2 |>
  select(
    hhid,
    mainid,
    primaryid,
    contactid,
    pname,
    hhname,
    accttype,
    contacttype,
    members,
    hhaddr1,
    hhaddr2,
    hhcity,
    hhstate,
    hhzip,
    relationship,
    prefname,
    deceased,
    cdonations
  ) |>
  mutate(donations = readr::parse_number(cdonations))

# check to be sure all looks good, especially donations parsing
skim(link3)
glimpse(link3)

link4 <- link3 |>
  select(-cdonations) |>
  arrange(as.numeric(hhid), primaryid, contactid)

# TODO? Come back and get full proper name of each household member - must be in the data

saveRDS(link4, fs::path(rds, "linkages.rds"))

```

### Accounts data

Get data from neon:

-   "Don's all-accounts report" -- an All Accounts Report
-   Run separately for individuals and companies and combine

```{r}
#| label: accounts-data-from-neon-report

acctfnames <- c(
  "accounts_individuals_2025-07-18.csv",
  "accounts_companies_2025-07-18.csv"
)
acctpaths <- fs::path(neon, acctfnames)

acct1 <- vroom(
  acctpaths,
  col_types = cols(.default = col_character()),
  id = "fname"
)
skimr::skim(acct1)
glimpse(acct1)
# cbind(1:ncol(acct1), names(acct1))
# nrows <- acct1 |> distinct() |> nrow()

acct2 <- acct1 |>
  rename(any_of(lookup)) |>
  mutate(
    account_type2 = case_when(
      str_detect(fname, "individuals") ~ "Individual",
      str_detect(fname, "companies") ~ "Company",
      .default = "ERROR"
    )
  )
count(acct2, account_type, account_type2) # we can drop account_type2
skim(acct2) # drop ...24, activity_contactid, activityid, gender
count(acct2, importid) # drop it's only values are 10 and 4 with most missing
count(acct2, donotcontact)
count(acct2, deceased)

drops <- c(
  "...24",
  "account_type2",
  "activity_contactid",
  "activityid",
  "fname",
  "gender",
  "importid"
)

acct3 <- acct2 |>
  select(-any_of(drops)) |>
  mutate(
    reg_allamount = parse_number(reg_allamount),
    donation_allamount = parse_number(donation_allamount),
    donotcontact = donotcontact == "Yes",
    deceased = deceased == "Yes"
  )
glimpse(acct3)
skim(acct3)

count(acct3, account_type)
#   account_type     n
#   <chr>        <int>
# 1 Company        291
# 2 Individual    4511

saveRDS(acct3, fs::path(rds, "accounts.rds"))

```


### Donations data

Donations from neon -- "Don's donation details report". Run once for Individuals and once for Companies, then combine below.

-   includes most ids but not household id. However, it has household name. We need to match this against a linkage file to get 
-   includes deceased and do not contact
-   Donations can include Donations, Pledges, Pledge Payments, and Matching Pledges

```{r}
#| label: donations-from-neon-report

dfnames <- c(
  "donations_detail_individuals_2025-07-18.csv",
  "donations_detail_companies_2025-07-18.csv"
)

dpaths <- fs::path(neon, dfnames)

don1 <- vroom(
  dpaths,
  col_types = cols(.default = col_character()),
  id = "fname"
)
skimr::skim(don1)
glimpse(don1)

nrows <- don1 |> distinct() |> nrow()

lookup <- deframe(vnames[, c("vname", "neon")])
lookup
don2 <- don1 |>
  rename(any_of(lookup)) |>
  mutate(
    account_type = case_when(
      str_detect(fname, "individuals") ~ "Individual",
      str_detect(fname, "companies") ~ "Company",
      .default = "ERROR"
    )
  )
glimpse(don2)
count(don2, fname, account_type)

don3 <- don2 |>
  select(-c(starts_with("..."), fname)) |>
  mutate(donation = parse_number(donation)) # the fields that cause problems are shown as NA in the source data, so ok

glimpse(don3)
skim(don3)

saveRDS(don3, fs::path(rds, "donations_no_hhid.rds"))

```

## Add household IDs to donations data TO COME


### Registrations data

```{r}
#| label: registrations
#| eval: false

regfnames <- c(
  "registrations_2011_through_2019.csv",
  "registrations_2020_through_2025-07-17.csv"
)
regpaths <- fs::path(neon, regfnames)

regs1 <- vroom(
  regpaths,
  col_types = cols(.default = col_character())
)
skimr::skim(regs1)
glimpse(regs1)

check <- regs1 |> distinct() |> nrow()
nrow(regs1)
check

tmp <- regs1 |>
  group_by_all() |>
  filter(n() > 1) |>
  ungroup()
# ~ 7k duplicates, not obvious why, need to investigate -- some are without account ids and may be legitimate
# KEEP DUPLICATES FOR NOW
names(regs1)
regs2 <- regs1 |>
  rename_with(.fn = tolower) |>
  select(
    accountid = 1,
    acctname = 2,
    amount,
    event,
    notes,
    startdate = `starts on`,
    payment,
    createdate = `created date`,
    lastdate = `last modified date`,
    lastmodby = `last modified by`,
    type,
    sysupdt = `system updates`,
    campaign,
    regdate = `registered on`,
    status
  )

skimr::skim(regs2)
glimpse(regs2)

regs3 <- regs2 |>
  mutate(
    across(contains("date"), \(x) lubridate::mdy(x)),
    amount = parse_number(amount)
  )

skimr::skim(regs3)
glimpse(regs3)

count(regs3, event, sort = TRUE) # 1.9k events none missing!
count(regs3, notes) # ~ 41 notes, rest are NA
count(regs3, payment) # 137 varieties
count(regs3, type)
# 1 Attendee              27953
# 2 Registrant             7154
# 3 Registrant & Attendee 18912
count(regs3, campaign) # 33 campaigns noted; 37k recs are NA
count(regs3, type)

events <- count(regs3, event, sort = TRUE) # 1.9k events none missing!

saveRDS(regs3, fs::path(rds, "registrations.rds"))

```

### Classify registrations by major and minor categories


## Analysis

```{r}
#| label: get-data

linkages <- readRDS(fs::path(rds, "linkages.rds"))
accounts <- readRDS(fs::path(rds, "accounts.rds"))
donations <- readRDS(fs::path(rds, "donations.rds"))
registrations <- readRDS(fs::path(rds, "registrations.rds"))

```

Our goal is to define the top 20% of all Hubbard Hall donors from the past 11 years (I think that was how far back we said this went) and then also from the past 5 years.

We are looking for contact family name, total giving all time, last gift date, last FY total giving amount, and for the top 20% a breakdown of what their gift categories were (we want a complete donor profile, so for each donor we want to see the total contribution amount that includes donations, class purchases, ticket buys, etc.)


### Top 20% all years


```{r}

glimpse(donations)
skim(donations)
count(donations, type)
count(donations, fund)
count(donations, purpose)
count(donations, source) # prob not needed

don1 <- donations |>
  filter(type == "DONATION", status == "SUCCEEDED") |>
  filter(accountid != "36805") |> # cash and miscellaneous credit card transactions
  select(accountid, acctname, date, donation) |> # campaign, fund, purpose,
  left_join(
    accounts |> select(accountid, accttype, hhid, hhname),
    by = join_by(accountid)
  ) |>
  filter(accttype == "Individual") |>
  mutate(
    hhfy = ifelse(month(date) >= 7, year(date) + 1, year(date)),
    hhid = ifelse(is.na(hhid), paste0("h_", accountid), hhid),
    hhname = ifelse(is.na(hhname), paste0("h_", acctname), hhname)
  )
skim(don1)

# group by hh and hhfy
donfy <- don1 |>
  summarise(donation = sum(donation), .by = c(hhid, hhname, hhfy))

donsums <- donfy |>
  summarise(
    total = sum(donation),
    before_2021 = sum(donation * (hhfy < 2021)),
    since_2021 = sum(donation * (hhfy >= 2021)),
    .by = c(hhid, hhname)
  )

donfywide <- donfy |>
  pivot_wider(names_from = hhfy, values_from = donation, values_fill = 0)

donfinal <- donsums |>
  left_join(
    donfywide |>
      select(hhid, hhname, `2021`:`2026`),
    by = join_by(hhid, hhname)
  ) |>
  mutate(
    pct_total = total / sum(total),
    pct_2021plus = since_2021 / sum(since_2021)
  ) |>
  relocate(pct_total, pct_2021plus, .after = since_2021) |>
  arrange(desc(total))

donfinal

```

### Top 20% 5 years



